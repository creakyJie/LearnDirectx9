// dxdemo1.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "dxdemo1.h"

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

//D3D全局变量
LPDIRECT3D9 g_D3D = NULL;
LPDIRECT3DDEVICE9 g_D3DDevice = NULL;

//声明初始化D3D窗口的函数
bool InitializeD3D(HWND hWnd);
//声明渲染窗口的函数
void RenderSence();
//关闭图形设备
void Shutdown();



// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass(HINSTANCE hInstance);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: 在此放置代码。
	MSG msg;
	ZeroMemory(&msg,sizeof(msg));
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_DXDEMO1, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化:
	/*if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}*/
	 HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

  /* if (!hWnd)
   {
      return FALSE;
   }*/
   if(InitializeD3D(hWnd))
   {
      ShowWindow(hWnd, nCmdShow);
      UpdateWindow(hWnd);
	  hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_DXDEMO1));

	    // 主消息循环:
	     while (msg.message!=WM_QUIT)
		{
			if(PeekMessage(&msg,NULL,0,0,PM_REMOVE))
			{
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
			else //渲染游戏场景
			{
				RenderSence();
			}
		}
		Shutdown();
		UnregisterClass(szWindowClass,hInst);
   }
  
	return (int) msg.wParam;
}

//初始化D3D窗口
bool InitializeD3D(HWND hWnd)
{
	//1.获取显示适配器的显示模式，需要用到一个结构体D3DDISPLAYMODE
	//1.1创建结构体变量；
	D3DDISPLAYMODE displayMode;
	//1.2创建D3D对象
	g_D3D=Direct3DCreate9(D3D_SDK_VERSION);
	//如果创建失败就返回false
	if(g_D3D==NULL) return false;
	//如果获取显示适配器的显示模式失败，也返回false
	if(FAILED(g_D3D->GetAdapterDisplayMode(D3DADAPTER_DEFAULT,&displayMode)))
	{
	 return false;
	}
	//使用展示结构体
	D3DPRESENT_PARAMETERS d3dpp;
	//这个结构体很多成员不过我们只使用它的几个成员，将其余的成员设置为0；
	//也可以先将整个结构体的所有成员设置为0，在根据需要设置有用的成员
	ZeroMemory(&d3dpp,sizeof(d3dpp));
	//设置为有窗口的
	d3dpp.Windowed = TRUE;
	//设置后缓存的格式
	d3dpp.BackBufferFormat = displayMode.Format;
	//设置交换效果，采用丢弃的效果
	d3dpp.SwapEffect =D3DSWAPEFFECT_DISCARD;
	//创建D3D设备对象
	
	if(FAILED(g_D3D->CreateDevice(D3DADAPTER_DEFAULT,D3DDEVTYPE_HAL,hWnd,D3DCREATE_HARDWARE_VERTEXPROCESSING,&d3dpp,&g_D3DDevice)))
	{
		return false;
	}
	return true;
}

//窗口渲染函数
void RenderSence()
{
	//在渲染之前需要清除设备
	g_D3DDevice->Clear(0,NULL,D3DCLEAR_TARGET,D3DCOLOR_XRGB(0,0,0),1.0f,0);
	//先在内存中话场景
	g_D3DDevice->BeginScene(); //开始场景
	//场景绘制。。。
	g_D3DDevice->EndScene();//结束绘制
	//交给显卡显示
	g_D3DDevice->Present(NULL,NULL,NULL,NULL);
}

//改变图形设备
void Shutdown()
{
	if(g_D3D!=NULL) g_D3D->Release();
	if(g_D3DDevice!=NULL) g_D3DDevice->Release();

	g_D3D = NULL;
	g_D3DDevice = NULL;
}
//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_DXDEMO1));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= 0;//MAKEINTRESOURCE(IDC_DXDEMO1);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
 

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;

	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// 分析菜单选择:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO: 在此添加任意绘图代码...
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}

这个代码在vs2010编译通过。
注意：
1.需要安装Microsoft DirectX SDK (June 2010)，当然也可以从一个以及安装和的电脑上面拷贝过来。
2.需要在vs2010中设置DirectX SDK的包含目录和库目录
3.需要在项目属性-》链接器-》输入-》编辑，输入d3d9.lib
